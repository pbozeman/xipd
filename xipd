#!/usr/bin/env python3

# âœ¨ðŸ¤–âœ¨Vibe coded with Claude
#
# I didn't edit a single line of this code, other than this comment,
# and only did the most minimal of code review.
#
# I spot checked the report against the IBIS package files. If used for
# routing, I suggest you do the same.
#
# I wrote the design doc in the README.md, including the delay and length
# calculations (with help from ChatGPT). The design doc served as the blueprint
# and context for Claude's work here.

import argparse
import sys
import signal
from pathlib import Path
import re
import csv

# Handle broken pipe gracefully (when output is piped to head, less, etc.)
signal.signal(signal.SIGPIPE, signal.SIG_DFL)


def parse_args():
    parser = argparse.ArgumentParser(
        description="Compute package delays for Xilinx chips from Vivado CSV files."
    )

    parser.add_argument(
        "package_file",
        type=Path,
        help="Path to the Vivado package file (e.g., 'pkgs/xc7a50tfgg484-1.pkg')",
    )

    # PCB stack-up parameters for length calculation
    length_group = parser.add_argument_group(
        "PCB Stack-up Parameters for Length Calculation"
    )
    length_group.add_argument(
        "--dielectric-constant",
        "-d",
        type=float,
        help="Dielectric constant (Îµr) of the PCB substrate",
    )
    length_group.add_argument(
        "--prepreg-height",
        "-p",
        type=float,
        help="Height of prepreg (distance from trace to reference plane) - use same units as trace width",
    )
    length_group.add_argument(
        "--trace-width",
        "-w",
        type=float,
        help="Width of the microstrip trace - use same units as prepreg height",
    )
    length_group.add_argument(
        "--output-units",
        "-o",
        choices=["mm", "mils"],
        default="mils",
        help="Units for output trace lengths (default: mils)",
    )

    return parser.parse_args()


def convert_length_units(value, from_unit, to_unit):
    """Convert a length value between units.

    Args:
        value: The value to convert
        from_unit: Source unit ("mm" or "mils")
        to_unit: Target unit ("mm" or "mils")

    Returns:
        The value in the target unit
    """
    if from_unit == to_unit:
        return value

    # Convert to mm if needed
    if from_unit == "mils":
        value_mm = value * 0.0254  # 1 mil = 0.0254 mm
    else:
        value_mm = value

    # Convert from mm to target unit if needed
    if to_unit == "mils":
        return value_mm / 0.0254  # Convert mm to mils
    else:
        return value_mm  # Already in mm


def calculate_stripline_effective_dielectric(er):
    """Calculate effective dielectric constant for stripline.

    For stripline, effective dielectric constant equals the substrate's dielectric constant.
    """
    return er


def calculate_microstrip_effective_dielectric(er, h, w):
    """Calculate effective dielectric constant for microstrip.

    Args:
        er: Dielectric constant of substrate
        h: Height of dielectric (distance from trace to ground plane)
        w: Width of the trace

    Note: h and w must be in the same units

    Returns:
        Effective dielectric constant for microstrip
    """
    # For microstrip, use the approximation formula
    # Note: h/w is a ratio, so units cancel out as long as they're the same
    return (er + 1) / 2 + (er - 1) / 2 * (1 / (1 + 12 * h / w) ** 0.5)


def calculate_propagation_delay(effective_dielectric):
    """Calculate propagation delay per unit length.

    Args:
        effective_dielectric: Effective dielectric constant

    Returns:
        Propagation delay in seconds per meter
    """
    speed_of_light = 299792458  # meters per second
    # Calculate delay as t_d = sqrt(Îµ_eff) / c
    return (effective_dielectric**0.5) / speed_of_light


def calculate_trace_length(delay_ps, propagation_delay_s_m, output_unit="mm"):
    """Calculate trace length from delay and propagation delay.

    Args:
        delay_ps: Package delay in picoseconds
        propagation_delay_s_m: Propagation delay in seconds per meter
        output_unit: Output unit, either "mm" or "mils"

    Returns:
        Equivalent trace length in specified unit
    """
    # Convert delay from ps to seconds
    delay_s = delay_ps * 1e-12

    # Calculate length in meters
    length_m = delay_s / propagation_delay_s_m

    # Convert to mm first
    length_mm = length_m * 1000

    # Convert to requested output unit
    if output_unit == "mils":
        return convert_length_units(length_mm, "mm", "mils")
    else:
        return length_mm


def parse_vivado_pkg_file(file_path):
    """Parse a Vivado package file (.pkg) to extract pin delay information.

    Args:
        file_path: Path to the Vivado package file

    Returns:
        Dictionary with pin data containing:
        - pin_data: Dict mapping pin numbers to their details (bank, site, type, avg_delay)
        - max_net_name_length: Length of the longest pin name for formatting
    """
    pin_data = {}

    with open(file_path, "r") as f:
        # Use csv module to handle the CSV format
        reader = csv.reader(f, delimiter=",")

        # Skip header rows (comments and column headers)
        header_row = None
        for row in reader:
            if row and row[0].startswith("#"):
                continue
            elif row and "Pin Number" in row:
                header_row = row
                break

        if not header_row:
            print(f"Error: Could not find header row in {file_path}", file=sys.stderr)
            return {"pin_data": {}, "max_net_name_length": 0}

        # Find column indices for the data we need
        pin_idx = header_row.index("Pin Number")
        bank_idx = header_row.index("IO Bank")
        site_idx = header_row.index("Site")
        site_type_idx = header_row.index("Site Type")
        min_delay_idx = header_row.index("Min Trace Delay (ps)")
        max_delay_idx = header_row.index("Max Trace Delay (ps)")

        # Process data rows
        for row in reader:
            if not row or len(row) <= max(
                pin_idx, bank_idx, site_idx, site_type_idx, min_delay_idx, max_delay_idx
            ):
                continue

            pin = row[pin_idx].strip()
            bank = row[bank_idx].strip() if row[bank_idx].strip() else "N/A"
            site = row[site_idx].strip() if row[site_idx].strip() else "N/A"
            site_type = (
                row[site_type_idx].strip() if row[site_type_idx].strip() else "N/A"
            )

            # Process min/max delays (may be empty for some pins)
            min_delay = row[min_delay_idx].strip()
            max_delay = row[max_delay_idx].strip()

            # Calculate average delay if both min and max are available
            avg_delay = None
            if min_delay and max_delay:
                try:
                    min_val = float(min_delay)
                    max_val = float(max_delay)
                    avg_delay = (min_val + max_val) / 2.0
                except ValueError:
                    # If conversion fails, leave as None
                    pass

            # Store pin data
            pin_data[pin] = {
                "bank": bank,
                "site": site,
                "site_type": site_type,
                "min_delay": float(min_delay) if min_delay else None,
                "max_delay": float(max_delay) if max_delay else None,
                "avg_delay": avg_delay,
            }

    # Calculate max pin name length for formatting
    max_pin_length = max([len(pin) for pin in pin_data.keys()], default=10)

    return {"pin_data": pin_data, "max_pin_length": max_pin_length}


def main():
    args = parse_args()

    # Verify the package file exists
    if not args.package_file.exists():
        print(f"Error: Package file not found: {args.package_file}", file=sys.stderr)
        return 1

    print(f"Processing package file: {args.package_file}")

    # Parse Vivado package file
    result = parse_vivado_pkg_file(args.package_file)
    pin_data = result["pin_data"]

    print(f"Found {len(pin_data)} pins in the package file")

    # Calculate the max pin name length for dynamic column sizing
    max_pin_length = result["max_pin_length"]
    # Ensure minimum width of 10 characters and add some padding
    pin_width = max(10, max_pin_length + 2)

    # Calculate width for site type column with minimum width
    max_site_type_length = 0
    for pin_info in pin_data.values():
        site_type = pin_info.get("site_type", "N/A")
        max_site_type_length = max(max_site_type_length, len(site_type))

    # Use a minimum width of 20 for site types, expanding as needed
    # We'll use max_site_type_length directly in the print statements with explicit padding
    # Min width check only needed for min_site_type_length
    if max_site_type_length < 20:
        max_site_type_length = 20

    # Initialize variables for length calculations
    calculate_lengths = False
    stripline_delay = None
    microstrip_delay = None

    # Check if PCB stack-up parameters are provided for length calculations
    required_params = {"dielectric-constant", "prepreg-height", "trace-width"}
    provided_params = set()

    if args.dielectric_constant is not None:
        provided_params.add("dielectric-constant")
    if args.prepreg_height is not None:
        provided_params.add("prepreg-height")
    if args.trace_width is not None:
        provided_params.add("trace-width")

    # Check for partial parameters (some provided but not all)
    if 0 < len(provided_params) < len(required_params):
        # Some parameters provided but not all - show error
        missing_params = required_params - provided_params
        missing_args = [f"--{param}" for param in missing_params]
        print(
            "\nError: Incomplete stack-up and geometry information.",
            file=sys.stderr,
        )
        print(
            "Either provide ALL stack-up and geometry parameters or none at all.",
            file=sys.stderr,
        )
        print(
            f"Missing: {', '.join(missing_args)}",
            file=sys.stderr,
        )
        return 1

    if len(provided_params) == len(required_params):
        calculate_lengths = True

        # Calculate effective dielectric constants
        stripline_eff_er = calculate_stripline_effective_dielectric(
            args.dielectric_constant
        )
        microstrip_eff_er = calculate_microstrip_effective_dielectric(
            args.dielectric_constant, args.prepreg_height, args.trace_width
        )

        # Calculate propagation delays
        stripline_delay = calculate_propagation_delay(stripline_eff_er)
        microstrip_delay = calculate_propagation_delay(microstrip_eff_er)

        # Always display propagation delay in ps/mm regardless of output units
        propagation_unit = "ps"
        # Convert from s/m to ps/mm
        stripline_delay_mm = stripline_delay * 1e12 / 1000  # ps/mm
        microstrip_delay_mm = microstrip_delay * 1e12 / 1000  # ps/mm

        # Print stack-up information
        print(f"\nPCB Stack-up Parameters:")
        print(f"  Dielectric Constant (Îµr): {args.dielectric_constant:.2f}")
        print(f"  Prepreg Height: {args.prepreg_height:.2f}")
        print(f"  Trace Width: {args.trace_width:.2f}")
        print(f"  Height/Width Ratio: {args.prepreg_height/args.trace_width:.3f}")
        print(f"  Effective Dielectric (Stripline): {stripline_eff_er:.2f}")
        print(f"  Effective Dielectric (Microstrip): {microstrip_eff_er:.2f}")
        print(f"  Propagation Delay (Stripline): {stripline_delay_mm:.4f} ps/mm")
        print(f"  Propagation Delay (Microstrip): {microstrip_delay_mm:.4f} ps/mm")

    # Print pin data with delay and other information
    print("\n")

    # Define the column widths
    col1_width = 10  # Pin Number
    col2_width = 10  # Bank
    col3_width = (
        max_site_type_length  # Site Type - dynamically sized based on longest entry
    )
    col4_width = 10  # Delay (ps)

    # Add columns for length calculations if parameters provided
    if calculate_lengths:
        col7_width = 12  # Stripline Length
        col8_width = 12  # Microstrip Length

        # Print header row 1 - column names
        site_header = "Site Type"
        header1 = (
            f"{'Pin':<{col1_width}}"
            f"{'Bank':<{col2_width}}"
            f"{site_header:<{max_site_type_length}}  "
            f"{'Delay':>{col4_width}}"
            f"{'Microstrip':>{col7_width}}"
            f"{'Stripline':>{col8_width}}"
        )
        # Print header row 2 - units
        header2 = (
            f"{'':<{col1_width}}"
            f"{'':<{col2_width}}"
            f"{'':<{max_site_type_length}}  "
            f"{'(ps)':>{col4_width}}"
            f"{'(' + args.output_units + ')':>{col7_width}}"
            f"{'(' + args.output_units + ')':>{col8_width}}"
        )
        print(header1)
        print(header2)
        print("-" * len(header1))
    else:
        # Print header row 1 - column names
        site_header = "Site Type"
        header1 = (
            f"{'Pin':<{col1_width}}"
            f"{'Bank':<{col2_width}}"
            f"{site_header:<{max_site_type_length}}  "
            f"{'Delay':>{col4_width}}"
        )
        # Print header row 2 - units
        header2 = (
            f"{'':<{col1_width}}"
            f"{'':<{col2_width}}"
            f"{'':<{max_site_type_length}}  "
            f"{'(ps)':>{col4_width}}"
        )
        print(header1)
        print(header2)
        print("-" * len(header1))

    def natural_sort_key(pin):
        """Return a key for sorting pins like A1...An, B1...Bn, AA1...AAn, etc."""
        # Split the pin name into letter part and number part
        import re

        letter_part = "".join(c for c in pin if c.isalpha())
        number_match = re.search(r"\d+", pin)
        number_part = int(number_match.group()) if number_match else 0

        # Add a priority based on letter part length so single letters come before double letters
        letter_length_priority = len(letter_part)

        # For primary sort, use letter length (1 or 2) and then letter part itself
        return (letter_length_priority, letter_part, number_part)

    for pin in sorted(pin_data.keys(), key=natural_sort_key):
        pin_info = pin_data[pin]
        bank = pin_info.get("bank", "N/A")
        site_type = pin_info.get("site_type", "N/A")
        avg_delay = pin_info.get("avg_delay")
        min_delay = pin_info.get("min_delay")
        max_delay = pin_info.get("max_delay")

        if avg_delay is not None:
            if calculate_lengths:
                # Calculate equivalent lengths
                stripline_length = calculate_trace_length(
                    avg_delay, stripline_delay, args.output_units
                )
                microstrip_length = calculate_trace_length(
                    avg_delay, microstrip_delay, args.output_units
                )

                # Format lengths based on output units - 4 decimal places for mm, 1 for mils
                if args.output_units == "mm":
                    print(
                        f"{pin:<{col1_width}}"
                        f"{bank:<{col2_width}}"
                        f"{site_type:<{max_site_type_length}}  "
                        f"{avg_delay:>{col4_width}.2f}"
                        f"{microstrip_length:>{col7_width}.4f}"
                        f"{stripline_length:>{col8_width}.4f}"
                    )
                else:
                    print(
                        f"{pin:<{col1_width}}"
                        f"{bank:<{col2_width}}"
                        f"{site_type:<{max_site_type_length}}  "
                        f"{avg_delay:>{col4_width}.2f}"
                        f"{microstrip_length:>{col7_width}.1f}"
                        f"{stripline_length:>{col8_width}.1f}"
                    )
            else:
                print(
                    f"{pin:<{col1_width}}"
                    f"{bank:<{col2_width}}"
                    f"{site_type:<{max_site_type_length}}  "
                    f"{avg_delay:>{col4_width}.2f}"
                )
        else:
            if calculate_lengths:
                print(
                    f"{pin:<{col1_width}}"
                    f"{bank:<{col2_width}}"
                    f"{site_type:<{max_site_type_length}}  "
                    f"{'N/A':>{col4_width}}"
                    f"{'N/A':>{col7_width}}"
                    f"{'N/A':>{col8_width}}"
                )
            else:
                print(
                    f"{pin:<{col1_width}}"
                    f"{bank:<{col2_width}}"
                    f"{site_type:<{max_site_type_length}}  "
                    f"{'N/A':>{col4_width}}"
                )

    return 0


if __name__ == "__main__":
    sys.exit(main())
